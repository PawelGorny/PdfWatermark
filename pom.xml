<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.pawelgorny</groupId>
    <artifactId>pdfwatermark</artifactId>
    <version>1.1.1</version>
    <packaging>jar</packaging>

    <name>pdfwatermark</name>
    <description>PDF Watermarking library</description>
    <developers>
        <developer>
            <name>Pawel Gorny</name>
            <url>https://pawelgorny.com</url>
        </developer>
    </developers>
    <url>https://github.com/PawelGorny/PdfWatermark</url>

    <scm>
        <connection>scm:git:https://github.com/PawelGorny/PdfWatermark.git</connection>
        <developerConnection>scm:git:ssh://github.com/PawelGorny/PdfWatermark.git</developerConnection>
        <url>https://github.com/PawelGorny/PdfWatermark</url>
    </scm>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>http://www.opensource.org/licenses/mit-license.php</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <itextVersion>5.5.13.1</itextVersion>
        <org.springframework-version>4.3.25.RELEASE</org.springframework-version>

        <sonar.jacoco.reportPath>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPath>
        <sonar.jacoco.itReportPath>${project.basedir}/target/jacoco-it.exec</sonar.jacoco.itReportPath>
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <jacoco-maven-plugin-version>0.8.4</jacoco-maven-plugin-version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${org.springframework-version}</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.github.librepdf/openpdf -->
        <dependency>
            <groupId>com.github.librepdf</groupId>
            <artifactId>openpdf</artifactId>
            <version>1.3.22</version>
        </dependency>


        <!--<dependency>-->
            <!--<groupId>com.itextpdf</groupId>-->
            <!--<artifactId>itextpdf</artifactId>-->
            <!--<version>${itextVersion}</version>-->
        <!--</dependency>-->

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${org.springframework-version}</version>
            <exclusions>
                <!-- Exclude Commons Logging in favor of SLF4j -->
                <exclusion>
                    <groupId>commons-logging</groupId>
                    <artifactId>commons-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.12.1</version>
        </dependency>

    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin-version}</version>
                <executions>
                    <execution>
                        <configuration>
                            <destFile>${sonar.jacoco.reportPath}</destFile>
                        </configuration>
                        <id>pre-test</id>
                        <phase>process-test-classes</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <!-- we want to execute jacoco:prepare-agent-integration in test phase,
                    but before executing maven failsafe plugin -->
                    <execution>
                        <configuration>
                            <destFile>${sonar.jacoco.itReportPath}</destFile>
                        </configuration>
                        <id>pre-itest</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>prepare-agent-integration</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
